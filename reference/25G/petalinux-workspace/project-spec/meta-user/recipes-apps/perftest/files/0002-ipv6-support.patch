diff --git a/src/perftest_communication.c b/src/perftest_communication.c
--- a/src/perftest_communication.c
+++ b/src/perftest_communication.c
@@ -11,6 +11,7 @@
 #include <sys/time.h>
 #include <sys/types.h>
 #include <sys/socket.h>
+#include <net/if.h>
 #include <netdb.h>
 #include "perftest_communication.h"
 
@@ -687,26 +688,50 @@ int set_up_connection(struct pingpong_context *ctx,
  ******************************************************************************/
 int rdma_client_connect(struct pingpong_context *ctx,struct perftest_parameters *user_param)
 {
+
+	struct sockaddr_storage sin_storage;
 	char *service;
 	int temp,num_of_retry= NUM_OF_RETRIES;
-	struct sockaddr_in sin;
+	unsigned int if_index;
+	struct sockaddr_in* sin4;
+	struct sockaddr_in6* sin6;
+	struct in6_addr sin6_addr;
 	struct addrinfo *res;
 	struct rdma_cm_event *event;
 	struct rdma_conn_param conn_param;
 	struct addrinfo hints;
+	char   *addr, *ifname, *temp_addr;
 
 	memset(&hints, 0, sizeof hints);
 	hints.ai_family   = AF_UNSPEC;
 	hints.ai_socktype = SOCK_STREAM;
+	temp_addr = malloc(500);
+	strcpy(temp_addr,user_param->servername);
+	addr = strtok(temp_addr, "%");
+	ifname = strtok(NULL, "%");
 
-	if (check_add_port(&service,user_param->port,user_param->servername,&hints,&res)) {
+	if (check_add_port(&service,user_param->port,addr,&hints,&res)) {
 		fprintf(stderr, "Problem in resolving basic adress and port\n");
 		return FAILURE;
 	}
 
-	sin.sin_addr.s_addr = ((struct sockaddr_in*)res->ai_addr)->sin_addr.s_addr;
-	sin.sin_family = PF_INET;
-	sin.sin_port = htons((unsigned short)user_param->port);
+	if (res->ai_family == AF_INET)
+	{
+		sin4 = (struct sockaddr_in*)&sin_storage;
+		sin4->sin_family = AF_INET;
+		sin4->sin_addr.s_addr = ((struct sockaddr_in*)res->ai_addr)->sin_addr.s_addr;
+		sin4->sin_port = htons((unsigned short)user_param->port);
+	}
+	if (res->ai_family == AF_INET6)
+	{
+		sin6 = (struct sockaddr_in*)&sin_storage;
+		sin6->sin6_family = AF_INET6;
+		sin6_addr = ((struct sockaddr_in6*)res->ai_addr)->sin6_addr;
+		memcpy((void*)&sin6->sin6_addr, (void*)&sin6_addr, 16);
+		sin6->sin6_port = htons((unsigned short)user_param->port);
+		if_index = if_nametoindex(ifname);
+		sin6->sin6_scope_id = if_index;
+	}
 
 	while (1) {
 
@@ -715,7 +740,7 @@ int rdma_client_connect(struct pingpong_context *ctx,struct perftest_parameters
 			return FAILURE;
 		}
 
-		if (rdma_resolve_addr(ctx->cm_id, NULL,(struct sockaddr *)&sin,2000)) {
+		if (rdma_resolve_addr(ctx->cm_id, NULL,(struct sockaddr *)&sin_storage,2000)) {
 			fprintf(stderr, "rdma_resolve_addr failed\n");
 			return FAILURE;
 		}
@@ -881,13 +906,16 @@ int retry_rdma_connect(struct pingpong_context *ctx,
 int rdma_server_connect(struct pingpong_context *ctx,
 		struct perftest_parameters *user_param)
 {
+	struct sockaddr_storage sin_storage;
 	int temp;
 	struct addrinfo *res;
 	struct rdma_cm_event *event;
 	struct rdma_conn_param conn_param;
 	struct addrinfo hints;
 	char *service;
-	struct sockaddr_in sin;
+	struct sockaddr_in* sin4;
+	struct sockaddr_in6* sin6;
+	struct addrinfo *tmp;
 
 	memset(&hints, 0, sizeof hints);
 	hints.ai_flags    = AI_PASSIVE;
@@ -899,11 +927,22 @@ int rdma_server_connect(struct pingpong_context *ctx,
 		return FAILURE;
 	}
 
-	sin.sin_addr.s_addr = 0;
-	sin.sin_family = PF_INET;
-	sin.sin_port = htons((unsigned short)user_param->port);
+	if (user_param->ipv6)
+	{
+		sin6 = (struct sockaddr_in*)&sin_storage;
+		sin6->sin6_addr = in6addr_any;
+		sin6->sin6_family = AF_INET6;
+		sin6->sin6_port = htons((unsigned short)user_param->port);
+	}
+	else
+	{
+		sin4 = (struct sockaddr_in*)&sin_storage;
+		sin4->sin_addr.s_addr = 0;
+		sin4->sin_family = AF_INET;
+		sin4->sin_port = htons((unsigned short)user_param->port);
+	}
 
-	if (rdma_bind_addr(ctx->cm_id_control,(struct sockaddr *)&sin)) {
+	if (rdma_bind_addr(ctx->cm_id_control,(struct sockaddr *)&sin_storage)) {
 		fprintf(stderr," rdma_bind_addr failed\n");
 		return 1;
 	}
@@ -1016,6 +1055,7 @@ int create_comm_struct(struct perftest_comm *comm,
 	comm->rdma_params->retry_count		= user_param->retry_count;
 	comm->rdma_params->mr_per_qp		= user_param->mr_per_qp;
 	comm->rdma_params->dlid			= user_param->dlid;
+	comm->rdma_params->ipv6			= user_param->ipv6;
 
 	if (user_param->use_rdma_cm) {
 
